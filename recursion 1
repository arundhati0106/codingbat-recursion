#changeHi
-approach -> check if first 2 chars of string, substring is "hi", if yes -> return 1 + check for remaining substring (from index 2)... 1st 2 index = "hi"
                                                                  if no  -> check for remaining substring (from index 1), eg -> hhi, first 2 -> hh, remove h, next 2 -> hi
public int countHi(String str) {
  if(str.length() < 2) 
    return 0;
    
  if(str.substring(0,2).equals("hi"))
    return 1 + countHi(str.substring(2));
    
  return countHi(str.substring(1));
}

#changeXY
-change all 'x' into 'y' in a given string
-appraoch -> if curr char is x, return y + check for remaining string
          -> else, return that char + check for remaining string

public String changeXY(String str) {
  if(str.length() == 0) 
    return "";
    
  if(str.charAt(0) == 'x')
    return 'y' + changeXY(str.substring(1));
    
  return str.charAt(0) + changeXY(str.substring(1));
}

#changePi
-change all 'pi' to '3.14' in a given string

public String changePi(String str) {
  if(str.length() < 2) return str;
  
  if(str.substring(0,2).equals("pi"))
    return "3.14" + changePi(str.substring(2));
  
  return str.charAt(0) + changePi(str.substring(1));
}

#noX
-remove all 'x' chars from string. return
-approach -> if curr char is x, check from next char
          -> else, add it to string and then check from next char
           
public String noX(String str) {
  if(str.length() == 0) 
    return "";
  
  if(str.charAt(0) == 'x') 
    return noX(str.substring(1));
    
  return str.charAt(0) + noX(str.substring(1));
    
}
 
#array6
-return true if array has number = 6, else false
-approach -> check if curr index in arr, is 6, if yes, return true, 
           -> else keep checking till end of array is reached
 
public boolean array6(int[] nums, int index) {
  if(index >= nums.length) 
    return false;
  
  if(nums[index] == 6) 
    return true;
    
  return array6(nums, index+1);
}

#array11
-return no of times 11 is present in array
-approach -> check if curr index in arr, is 11, if yes, return 1 + recursively check for remaining array
          -> keep checking till end of array is reached
 
public int array11(int[] nums, int index) {
  if(index >= nums.length) 
    return 0;
  
  if(nums[index] == 11) 
    return 1 + array11(nums, index+1);
    
  return array11(nums, index+1);
}

#array220
-return true if the array contains a value followed by that value, times 10, in the array, somewhere.
-approach -> since 2 indices are being checked at once, as soon as index+1 is at last index, return false
          -> recursively check if ele at index = ele at index + 1 times 10, if yes, return true, if not, recursively check for next 2 ele
          
public boolean array220(int[] nums, int index) {
  if(index+1 >= nums.length) return false;
  
  return nums[index]*10 == nums[index+1] || array220(nums, index+1);
}

#allstar
-separate all chars of a string, by a '*'
-apaproach -> take a char, add '*' and recursively call func for remaining string
           -> str.length() <= 1, not 0, as we dont wish to add '*' after last char. simply return remaining string
           
public String allStar(String str) {
  if(str.length() <= 1)
    return str;
          
  return str.charAt(0) + "*" + allStar(str.substring(1));
} 

#pairStar
-identical chars that are adjacent in the original string are separated from each other by a "*"
-approach -> if string length = 1, i.e. has only 1 element, cant check for adjacent char at (1), null pointer exc, so return string
          -> if adj chars are equal, add '*' after 0th char,
          -> if not, add 1st char, and recursively check for remaining string
          
public String pairStar(String str) {
  if(str.length() <= 1) return str;
  
  if(str.charAt(0) == str.charAt(1))
    return str.charAt(0) + "*" + pairStar(str.substring(1));
    
  return str.charAt(0) + pairStar(str.substring(1));
}

#endX
-recursively compute a new string where all the lowercase 'x' chars have been moved to the end of the string.
-approach -> if string length < 2, or null, returns ir
          -> if first char in string is 'x', call func for string from next char, and add x 
          -> else, add that char, and recursively call for remaining string
          
public String endX(String str) {
    if(str.length() <= 1 || str == null)
        return str;

    //if we encounter x, recursively check for next character, and add x to the end
    if(str.charAt(0) == 'x')
        return endX(str.substring(1)) + 'x';

    //if we encounter any other character, add that first, and then check for remaining string
    return str.charAt(0) + endX(str.substring(1));
}


